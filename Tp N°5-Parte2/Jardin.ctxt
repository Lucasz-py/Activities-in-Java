#BlueJ class context
comment0.target=Jardin
comment0.text=\r\n\ Clase\ Jardin.\r\n\ Representa\ un\ espacio\ que\ contiene\ diferentes\ figuras\ geom\u00E9tricas\ y\r\n\ calcula\ la\ superficie\ total\ a\ cubrir,\ los\ litros\ de\ pintura\ necesarios\r\n\ y\ la\ cantidad\ de\ latas\ a\ comprar.\r\n\ *\ @authors\ (Lucas\ Escobar,\ Gabriel\ Fernandez)\r\n\ @version\ (10/10/2025)\r\n
comment1.params=p_nombre\ p_figuras
comment1.target=Jardin(java.lang.String,\ java.util.ArrayList)
comment1.text=\r\n\ Constructor\ de\ la\ clase\ Jardin.\r\n\ Inicializa\ el\ jard\u00EDn\ con\ un\ nombre\ y\ una\ colecci\u00F3n\ inicial\ de\ figuras.\r\n\ *\ @param\ p_nombre\ El\ nombre\ que\ se\ asigna\ al\ jard\u00EDn.\r\n\ @param\ p_figuras\ La\ lista\ inicial\ de\ figuras\ geom\u00E9tricas\ en\ el\ jard\u00EDn.\r\n
comment10.params=
comment10.target=int\ cuantasLatas()
comment10.text=\r\n\ Calcula\ la\ cantidad\ de\ latas\ de\ pintura\ a\ comprar,\r\n\ asumiendo\ que\ cada\ lata\ contiene\ 4.0\ litros.\ El\ resultado\r\n\ se\ redondea\ hacia\ arriba\ para\ asegurar\ la\ cobertura\ total.\r\n\ *\ @return\ La\ cantidad\ m\u00EDnima\ de\ latas\ (entero).\r\n
comment11.params=
comment11.target=void\ detalleFiguras()
comment11.text=\r\n\ Muestra\ el\ detalle\ completo\ del\ presupuesto\ del\ jard\u00EDn,\r\n\ incluyendo\ el\ nombre,\ la\ superficie\ de\ cada\ figura,\ la\ superficie\r\n\ total\ y\ la\ cantidad\ de\ latas\ a\ comprar.\r\n
comment2.params=p_nombre
comment2.target=void\ setNombre(java.lang.String)
comment2.text=\r\n\ \u2605\ Establece\ el\ nombre\ del\ jard\u00EDn.\r\n\ *\ @param\ p_nombre\ El\ nuevo\ nombre\ del\ jard\u00EDn.\r\n
comment3.params=p_figuras
comment3.target=void\ setFiguras(java.util.ArrayList)
comment3.text=\r\n\ \u2605\ Establece\ la\ colecci\u00F3n\ de\ figuras\ geom\u00E9tricas.\r\n\ *\ @param\ p_figuras\ La\ nueva\ lista\ de\ figuras.\r\n
comment4.params=
comment4.target=java.lang.String\ getNombre()
comment4.text=\r\n\ Getter\ \u2605\ Retorna\ el\ nombre\ del\ jard\u00EDn.\r\n\ *\ @return\ El\ nombre\ actual\ del\ jard\u00EDn.\r\n
comment5.params=
comment5.target=java.util.ArrayList\ getFigura()
comment5.text=\r\n\ Getter\ \u2605\ Retorna\ la\ lista\ de\ figuras\ geom\u00E9tricas.\r\n\ *\ @return\ La\ lista\ (ArrayList)\ de\ objetos\ FiguraGeometrica.\r\n
comment6.params=p_figuras
comment6.target=boolean\ agregarFigura(FiguraGeometrica)
comment6.text=\r\n\ Agrega\ una\ nueva\ figura\ geom\u00E9trica\ a\ la\ colecci\u00F3n\ del\ jard\u00EDn.\r\n\ *\ @param\ p_figuras\ La\ figura\ geom\u00E9trica\ a\ agregar.\r\n\ @return\ true\ si\ la\ figura\ fue\ agregada\ exitosamente.\r\n
comment7.params=p_figuras
comment7.target=boolean\ quitarFigura(FiguraGeometrica)
comment7.text=\r\n\ Quita\ una\ figura\ geom\u00E9trica\ espec\u00EDfica\ de\ la\ colecci\u00F3n,\r\n\ siempre\ y\ cuando\ queden\ al\ menos\ dos\ figuras\ en\ total.\r\n\ *\ @param\ p_figuras\ La\ figura\ geom\u00E9trica\ a\ quitar.\r\n\ @return\ true\ si\ la\ figura\ fue\ quitada,\ false\ si\ no\ se\ pudo\ quitar\ (por\ ejemplo,\ si\ queda\ solo\ una\ figura\ o\ no\ se\ encuentra).\r\n
comment8.params=
comment8.target=double\ cuantosMetros()
comment8.text=\r\n\ Calcula\ la\ superficie\ total\ a\ cubrir\ sumando\ las\ superficies\ de\ todas\ las\ figuras.\r\n\ *\ @return\ La\ superficie\ total\ en\ metros\ cuadrados\ (double).\r\n
comment9.params=
comment9.target=double\ cuantosLitros()
comment9.text=\r\n\ Calcula\ la\ cantidad\ total\ de\ litros\ de\ pintura\ necesarios,\r\n\ asumiendo\ que\ se\ requieren\ 4\ litros\ por\ cada\ 20\ m2\ (0.2\ L/m2).\r\n\ *\ @return\ La\ cantidad\ total\ de\ litros\ requeridos\ (double).\r\n
numComments=12
